第一种：
#按每个文件100行进行分割
[root@localhost 4]# split -l 100 /root/1.log log
[root@localhost 4]# ls
logaa  logab  logac  logad  logae  logaf  logag  logah  logai  logaj  logak  logal
#按每个文件20K来分割（单位可以是M和G）
[root@localhost 7]# split -b 20K /root/2.log log
[root@localhost 7]# ls
logaa  logab  logac  logad  logae  logaf  logag  logah  logai

第二种：
默认centos安装了logrotate,如果没有，安装命令如下：
yum -y install logrotate crontabs
软件包信息说明：
[root@localhost~]#rpm -ql logrotate
/etc/cron.daily/logrotate
/etc/logrotate.conf#主配置文件
/etc/logrotate.d#配置目录
创建一个日志文件：
touch /var/log/log-file
向log-file中加入10MB的比特流数据：
head -c 10M < /dev/urandom > /var/log/log-file
由于现在日志文件已经准备好，我们将配置logrotate来轮循该日志文件，让我们为该日志文件创建一个配置文件:
[root@localhost~]#vim /etc/logrotate.d/log-file
/var/log/log-file{
	monthly
	rotate5
	compress
	delaycompress
	missingok
	notifempty
	create 644 root root
	postrotate
		/usr/bin/killall -HUP rsyslogd
	endscript
}
以上模板是通用模板，可以根据自己的需要调整参数。
参数说明：
monthly	
日志文件将按月轮循。其它可用值为'daily'，'weekly'或者'yearly'。

rotate5	
一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除。

compress	
在轮循任务完成后，已轮循的归档将使用gzip进行压缩。

delaycompress	
总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。

missingok	
在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。

notifempty	
如果日志文件为空，轮循不会进行。

create644rootroot	
以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。

postrotate/endscript	
在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd进程将立即再次读取其配置并继续运行。

手动运行logrotate：
logrotate可以在任何时候从命令行手动调用。要为/etc/lograte.d/下配置的所有日志调用logrotate：
[root@localhost ~]#logrotate /etc/logrotate.conf
要为某个特定的配置调用logrotate,执行一次切割任务测试：
[root@localhost ~]# ll /var/log/log-file 
-rw-r--r-- 1 root root 10485760 Apr 11 10:59 /var/log/log-file
[root@localhost ~]# logrotate -vf /etc/logrotate.d/log-file
[root@localhost ~]# ll /var/log/log-file*
-rw-r--r-- 1 root root        0 Apr 11 11:00 /var/log/log-file
-rw-r--r-- 1 root root 10485760 Apr 11 10:59 /var/log/log-file.1
即使轮循条件没有满足，我们也可以通过使用‘-f’选项来强制logrotate轮循日志文件，‘-v’参数提供了详细的输出。

logrotate自身的日志通常存放于/var/lib/logrotate/status目录。如果处于排障目的，我们想要logrotate记录到任何指定的文件，我们可以指定像下面这样从命令行指定：
[root@localhost ~]# logrotate -vf -s /var/log/logrotate-status /etc/logrotate.d/log-file

Logrotate定时任务：
logrotate需要的cron任务应该在安装时就自动创建了，cron文件的内容：
[root@localhost ~]# cat /etc/cron.daily/logrotate
#!/bin/sh

/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf
EXITVALUE=$
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit 0

为nginx设置日志切割，防止访问日志文件过大：
[root@localhost ~]# cat /etc/logrotate.d/nginx
/www/server/nginx/logs/error.log {
	daily
	rotate 5
	missingok
	notifempty
	create 644 root root
	postrotate
		if [ -f /www/server/nginx/logs/nginx.pid ]; then
			kill -USR1 `cat /www/server/nginx/logs/nginx.pid`
		fi
	endscript
}
根据自己nginx具体的error.log和nginx.pid文件位置修改。
logrotate工具对于防止因庞大的日志文件而耗尽存储空间是十分有用的。配置完毕后，进程是全自动的，可以长时间在不需要人为干预下运行。

关于USR1信号解释

对于USR1和2都可以用户自定义的，在POSIX兼容的平台上，SIGUSR1和SIGUSR2是发送给一个进程的信号，它表示了用户定义的情况。它们的符号常量在头文件signal.h中定义。在不同的平台上，信号的编号可能发生变化，因此需要使用符号名称。

kill-HUPpid或者killall-HUPpName：
其中pid是进程标识，pName是进程的名称。

如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。
